#!/usr/bin/env python
"""
Quick and dirty script to restore raw data transfer status.

1. Obtain rsync time from modification time of exposure directory.
2. Set checksum time to rsync time.
3. Ignore pipeline time (as of early 2020).
4. Obtain backup time from HPSS backup files.

This script is deliberately kept separate from the package because it
uses hpsspy.
"""
from sys import exit
import json
import os
import hpsspy.os as hpos


def backup_times(path='desi/spectro/data'):
    """Obtain backup times from HPSS files.

    Parameters
    ----------
    path : :class:`str`
        The HPSS path to the raw data backup files.

    Returns
    -------
    :class:`dict`
        A mapping of night to backup time.  The backup time is in milliseconds
        for compatibility with JavaScript.
    """
    ls = hpos.listdir(path)
    return dict([(os.path.splitext(f.name)[0].split('_')[-1], f.st_mtime*1000)
                 for f in ls if f.name.endswith('.tar')])


def main():
    """Entry point for :command:`desi_transfer_status_restore`.

    Returns
    -------
    :class:`int`
        An integer suitable for passing to :func:`sys.exit`.
    """
    bt = backup_times()
    nights = os.listdir(os.environ['DESI_SPECTRO_DATA'])
    status = list()
    for night in nights:
        if night != 'README.html':
            exposures = os.listdir(os.path.join(os.environ['DESI_SPECTRO_DATA'], night))
            for exp in exposures:
                rt = int(os.stat(os.path.join(os.environ['DESI_SPECTRO_DATA'], night, exp)).st_mtime * 1000)
                status.append([int(night), int(exp), 'rsync', True, '', rt])
                status.append([int(night), int(exp), 'checksum', True, '', rt])
                try:
                    status.append([int(night), int(exp), 'backup', True, '', bt[night]])
                except KeyError:
                    pass
    status = sorted(status, key=lambda x: x[0]*10000000 + x[1], reverse=True)
    with open('desi_transfer_status_restore.json', 'w') as j:
        json.dump(status, j, indent=None, separators=(',', ':'))
    return 0


if __name__ == '__main__':
    try:
        foo = os.environ['HPSS_DIR']
    except KeyError:
        os.environ['HPSS_DIR'] = '/usr/common/mss'
    exit(main())
