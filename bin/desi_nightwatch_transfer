#!/usr/bin/env python
"""
Hacky by-hand sync of KPNO nightwatch until we have it integrated into the
standard data transfer.

Run as desi@dtn01.nersc.gov.

Catchup on a specific night::

    NIGHT=20200124 && rsync -rlvt --exclude-from rsync-exclude.txt dts:/exposures/nightwatch/${NIGHT}/ /global/cfs/cdirs/desi/spectro/nightwatch/kpno/${NIGHT}/


Typical startup sequence (bash shell)::

    source /global/common/software/desi/desi_environment.sh datatran
    module load desitransfer
    nohup nice -19 ${DESITRANSFER}/bin/desi_nightwatch_transfer &> ${DESI_ROOT}/spectro/nightwatch/sync/desi_nightwatch_transfer.log &
    tail -f ${DESI_ROOT}/spectro/nightwatch/sync/desi_nightwatch_transfer.log

"""
import os, sys, stat, time, glob, datetime, subprocess


def what_night_is_it():
    d = datetime.datetime.utcnow() - datetime.timedelta(7/24+0.5)
    tonight = int(d.strftime('%Y%m%d'))
    return tonight


def main():
    """Entry point for :command:`desi_nightwatch_transfer`.

    Returns
    -------
    :class:`int`
        An integer suitable for passing to :func:`sys.exit`.
    """
    errcount = 0
    while True:
        night = what_night_is_it()
        t0 = time.time()

        #- First check if there is any data for tonight yet
        print('--- {} Checking for nightwatch data from {}'.format(time.asctime(), night))
        cmd = "rsync dts:/exposures/nightwatch/"
        try:
            results = subprocess.check_output(cmd.split())
            found = False
            for line in results.decode().split('\n'):
                if line.endswith(str(night)):
                    print(line)
                    found = True
                    break

            if not found:
                print('{} No nightwatch data found for {}; trying again in 10 minutes'.format(time.asctime(), night))
                sys.stdout.flush()
                time.sleep(600)
                continue

        except subprocess.CalledProcessError:
            errcount += 1
            print('ERROR getting file list for {}; try again in 10 minutes'.format(night))
            sys.stdout.flush()
            time.sleep(600)
            continue

        #- sync per-night directory
        basedir = os.path.join(os.environ['DESI_ROOT'], 'spectro', 'nightwatch')
        kpnodir = os.path.join(basedir, 'kpno')
        syncdir = os.path.join(basedir, 'sync')
        nightdir = os.path.join(kpnodir, str(night))
        cmd = "rsync -rlvt --exclude-from {0}/rsync-exclude.txt dts:/exposures/nightwatch/{1}/ {2}/".format(syncdir, night, nightdir)

        print('--- {} syncing {}'.format(time.asctime(), night))
        print(cmd)
        sys.stdout.flush()
        err = subprocess.call(cmd.split())
        if err != 0:
            errcount += 1
            print('ERROR syncing {} at {}'.format(night, time.asctime()))

        #- Correct the permissions
        if os.path.exists(nightdir):
            print('--- {} fixing permissions for Apache'.format(time.asctime()))
            sys.stdout.flush()
            cmd = "fix_permissions.sh -a {}".format(nightdir)
            err = subprocess.call(cmd.split())
            if err != 0:
                errcount += 1
                print('ERROR fixing permissions for {} at {}'.format(
                    nightdir, time.asctime()))
        else:
            print('{} no data yet for night {}'.format(time.asctime(), night))

        #- Sync the top level files; skip the logs
        print('--- {} syncing top level html/js files'.format(time.asctime()))
        sys.stdout.flush()
        cmd = "rsync -lvt --files-from {0}/rsync-include.txt dts:/exposures/nightwatch/ {1}/".format(syncdir, kpnodir)
        print(cmd)
        err = subprocess.call(cmd.split())
        if err != 0:
            errcount += 1
            print('ERROR syncing top level html files at {}'.format(time.asctime()))

        #- Hack: just add world read to those top level files since fix_permissions.sh
        #- is recursive and we don't want to redo all nights
        for filename in ['nights.html', 'nightlinks.js', 'qa-lastexp.html']:
            mode = stat.S_IRUSR | stat.S_IWUSR | stat.S_IRGRP | stat.S_IROTH
            os.chmod(os.path.join(kpnodir, filename), mode)

        if errcount > 10:
            print('FATAL: something is wrong; stopping')
            return 1

        #- if that took less than 10 minutes, sleep a bit
        dt = time.time() - t0
        waittime = 600
        if dt < waittime:
            print('--- {} sleeping for a bit'.format(time.asctime()))
            sys.stdout.flush()
            time.sleep(waittime - dt)


if __name__ == '__main__':
    sys.exit(main())
